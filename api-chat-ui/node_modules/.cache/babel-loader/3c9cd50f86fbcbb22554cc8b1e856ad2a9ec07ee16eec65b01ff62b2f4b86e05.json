{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\EzgiC\\\\WebstormProjects\\\\api-chat\\\\api-chat-ui\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [message, setMessage] = useState('');\n  const [messages, setMessages] = useState([]);\n  const handleSend = async () => {\n    if (!message.trim()) return;\n    const userMessage = {\n      text: message,\n      sender: 'user'\n    };\n    const newMessages = [...messages, userMessage, {\n      text: 'Typing...',\n      sender: 'bot'\n    }];\n    setMessages(newMessages);\n    setMessage('');\n    try {\n      const res = await fetch('http://localhost:3001/chat', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          message\n        })\n      });\n      const data = await res.json();\n      const reply = data.response || \"No response\";\n\n      // Check if the response contains the amount and paid fields\n      const amount = data.amount !== null ? `$${data.amount}` : \"Amount not available\";\n      const paid = data.paid !== null ? data.paid ? \"Paid\" : \"Not Paid\" : \"Paid status not available\";\n\n      // Construct the reply message based on the available data\n      const finalReply = `Here is your bill: ${amount}, Paid: ${paid}`;\n\n      // Replace \"Typing...\" with the real response\n      setMessages(prev => [...prev.slice(0, -1), {\n        text: finalReply,\n        sender: 'bot'\n      }]);\n    } catch (err) {\n      setMessages(prev => [...prev.slice(0, -1), {\n        text: 'Error contacting server.',\n        sender: 'bot'\n      }]);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"messages\",\n        children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `message ${msg.sender}`,\n          children: msg.text\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-area\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: message,\n          placeholder: \"Type your message...\",\n          onChange: e => setMessage(e.target.value),\n          onKeyDown: e => e.key === 'Enter' && handleSend()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSend,\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"R9cL6wTFJ4Cm4nINx8rfDHzMChE=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","App","_s","message","setMessage","messages","setMessages","handleSend","trim","userMessage","text","sender","newMessages","res","fetch","method","headers","body","JSON","stringify","data","json","reply","response","amount","paid","finalReply","prev","slice","err","className","children","map","msg","index","fileName","_jsxFileName","lineNumber","columnNumber","type","value","placeholder","onChange","e","target","onKeyDown","key","onClick","_c","$RefreshReg$"],"sources":["C:/Users/EzgiC/WebstormProjects/api-chat/api-chat-ui/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\n\nfunction App() {\n    const [message, setMessage] = useState('');\n    const [messages, setMessages] = useState([]);\n\n    const handleSend = async () => {\n        if (!message.trim()) return;\n\n        const userMessage = { text: message, sender: 'user' };\n        const newMessages = [...messages, userMessage, { text: 'Typing...', sender: 'bot' }];\n        setMessages(newMessages);\n        setMessage('');\n\n        try {\n            const res = await fetch('http://localhost:3001/chat', {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({ message }),\n            });\n\n            const data = await res.json();\n            const reply = data.response || \"No response\";\n\n            // Check if the response contains the amount and paid fields\n            const amount = data.amount !== null ? `$${data.amount}` : \"Amount not available\";\n            const paid = data.paid !== null ? (data.paid ? \"Paid\" : \"Not Paid\") : \"Paid status not available\";\n\n            // Construct the reply message based on the available data\n            const finalReply = `Here is your bill: ${amount}, Paid: ${paid}`;\n\n            // Replace \"Typing...\" with the real response\n            setMessages((prev) => [\n                ...prev.slice(0, -1),\n                { text: finalReply, sender: 'bot' },\n            ]);\n        } catch (err) {\n            setMessages((prev) => [\n                ...prev.slice(0, -1),\n                { text: 'Error contacting server.', sender: 'bot' },\n            ]);\n        }\n    };\n\n\n\n\n    return (\n        <div className=\"App\">\n            <div className=\"chat-container\">\n                <div className=\"messages\">\n                    {messages.map((msg, index) => (\n                        <div key={index} className={`message ${msg.sender}`}>\n                            {msg.text}\n                        </div>\n                    ))}\n                </div>\n                <div className=\"input-area\">\n                    <input\n                        type=\"text\"\n                        value={message}\n                        placeholder=\"Type your message...\"\n                        onChange={(e) => setMessage(e.target.value)}\n                        onKeyDown={(e) => e.key === 'Enter' && handleSend()}\n                    />\n                    <button onClick={handleSend}>Send</button>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}